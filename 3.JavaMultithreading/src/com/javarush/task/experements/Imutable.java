package com.javarush.task.experements;


import java.util.Arrays;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;

public class Imutable {
    public static void main(String... args) throws BackingStoreException {
//        Integer i = 1;
//        Integer j = i;
//        j++;
//        System.out.printf("i = %d%n",i);
//        System.out.printf("j = %d%n",j);
//        String str = "–°—Ç—Ä–æ–∫–∞";
//        String ka = "–∫–∞";
//        System.out.println(str.substring(0,1));
//        String str2 = "–°—Ç—Ä–æ"+ka;
//        System.out.println(str==str2);
//        System.out.println(str.hashCode());
//        System.out.println(str2.hashCode());
//        System.out.println("".hashCode());
//        StringBuffer sbff;
//        StringBuilder sbld;
//        int[] i1 = {1,2,3,4,5};
//        int[] i2 = {1,2,3,4,5};
//        System.out.println(i1==i2);  // false
//        System.out.println(i1.equals(i2));  // false (—ç—Ç–æ —Ç—É–ø–æ –º–µ—Ç–æ–¥ –∏–∑ –∫–ª–∞—Å—Å–∞ Object)
//        System.out.println(Arrays.equals(i1, i2)); // true
//        int x = 3;
//        x+= x++;
//        System.out.println(x);
//        List<Integer> piDigits = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9 );
//
////        MethodHandles.Lookup lookup = MethodHandles.lookup();
////                                                                //–ó–∞–¥–∞–µ—Ç—Å—è —Ç–∏–ø –º–µ—Ç–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è String.substring(int): String
////        MethodType methodType = MethodType.methodType(String.class, int.class);
////        MethodHandle methodHandle = lookup.findVirtual(String.class, "substring", mt);
////        String str = (String) methodHandle.invokeExact("smiles", 1);
////        assert(str.equals("miles"));
//
//        String s4 = "êÄê";
//        String s41 = "\uD800\uDC10";
//        System.out.println("\uD800");
//        System.out.println("\uDC10");
//        System.out.println(s4);
//        System.out.println(s41);
//        System.out.println(s4.length());
//

//        int[] ints = {5,6,4,7,3,8};
//        Arrays.i
//        IntStream.range(0,ints.length)..forEach(System.out::println);



        Preferences numberPref = Preferences.userNodeForPackage(Number.class);

        //numberPref.put("–ú–æ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞","–∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏");
        System.out.println(numberPref.get("–ú–æ—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞","–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"));

        System.out.println("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∞ Number "+Arrays.toString(numberPref.keys()));


    }


}
